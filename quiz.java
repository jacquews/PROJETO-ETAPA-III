import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class Quiz {
    private ArrayList<Pergunta> perguntas;
    private Usuario usuario;
    private Scanner scanner;

    public Quiz(Usuario usuario) {
        this.usuario = usuario;
        this.perguntas = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        carregarPerguntas();
    }

    public void iniciar() {
        System.out.println("\nüéØ Bem-vindo(a) ao Quiz de Java, " + usuario.getNome() + "!");
        System.out.println("üìö As perguntas s√£o sorteadas dos cap√≠tulos do livro.\n");

        Collections.shuffle(perguntas); // Sorteia a ordem das perguntas

        for (Pergunta pergunta : perguntas) {
            pergunta.exibirPergunta();
            System.out.print("Sua resposta (A, B, C ou D): ");
            char respostaUsuario = scanner.nextLine().toUpperCase().charAt(0);

            if (pergunta.verificarResposta(respostaUsuario)) {
                System.out.println("‚úîÔ∏è Correto!\n");
                usuario.acertou();
            } else {
                System.out.println("‚ùå Incorreto! Resposta correta: " + pergunta.getRespostaCorreta() + "\n");
                usuario.errou();

                if (usuario.getErros() >= 4) {
                    System.out.println("üòÖ PERDEU, PLAYBOY!");
                    mostrarResultado();
                    return;
                }
            }
        }

        mostrarResultado();
    }

    private void mostrarResultado() {
        int total = perguntas.size();
        double percentual = (usuario.getAcertos() * 100.0) / total;

        System.out.println("‚úÖ Quiz finalizado!");
        System.out.println("üéØ Total de acertos: " + usuario.getAcertos() + " de " + total);
        System.out.printf("üìä Aproveitamento: %.2f%%\n", percentual);
    }

    private void carregarPerguntas() {
        perguntas.add(new Pergunta(
                "O que √© uma classe em Java?",
                new String[]{"A) Um tipo de vari√°vel.", "B) Um arquivo de configura√ß√£o.", "C) Um modelo para criar objetos.", "D) Um componente da interface gr√°fica."},
                'C',
                "Cap√≠tulo 2 - Classes e Objetos"
        ));

        perguntas.add(new Pergunta(
                "Qual √© a principal fun√ß√£o do padr√£o Observer?",
                new String[]{"A) Permitir que uma classe tenha m√∫ltiplos construtores.", "B) Notificar m√∫ltiplos objetos quando o estado de outro muda.", "C) Manter classes pequenas e r√°pidas.", "D) Criar GUIs com mais facilidade."},
                'B',
                "Cap√≠tulo 10 - Padr√µes de Projeto"
        ));

        perguntas.add(new Pergunta(
                "O que faz a palavra-chave synchronized em Java?",
                new String[]{"A) Cria um loop autom√°tico.", "B) Garante que apenas uma thread acesse um bloco de c√≥digo por vez.", "C) Inicia uma nova thread.", "D) Define uma vari√°vel como final."},
                'B',
                "Cap√≠tulo 11 - Concorr√™ncia e Threads"
        ));

        perguntas.add(new Pergunta(
                "O que √© encapsulamento?",
                new String[]{"A) Ocultar a estrutura do banco de dados.", "B) Dividir o programa em arquivos menores.", "C) Proteger os dados internos de uma classe, acessando-os apenas por m√©todos.", "D) Comprimir os arquivos .class."},
                'C',
                "Cap√≠tulo 4 - Encapsulamento"
        ));

        perguntas.add(new Pergunta(
                "O que significa heran√ßa em Java?",
                new String[]{"A) Um m√©todo herdado de outra classe.", "B) Uma classe pode adquirir comportamentos e atributos de outra.", "C) Compartilhar vari√°veis com todos os m√©todos.", "D) Repetir c√≥digo dentro da mesma classe."},
                'B',
                "Cap√≠tulo 5 - Heran√ßa"
        ));

        perguntas.add(new Pergunta(
                "O que acontece quando usamos == para comparar objetos em Java?",
                new String[]{"A) Compara se os objetos s√£o do mesmo tipo.", "B) Compara o conte√∫do dos objetos.", "C) Compara se duas vari√°veis referem-se ao mesmo objeto.", "D) Cria uma nova c√≥pia do objeto."},
                'C',
                "Cap√≠tulo 6 - Compara√ß√£o de Objetos"
        ));

        perguntas.add(new Pergunta(
                "Qual √© a principal diferen√ßa entre uma interface e uma classe abstrata?",
                new String[]{"A) Interfaces n√£o podem ter m√©todos.", "B) Interfaces n√£o suportam heran√ßa.", "C) Classes abstratas podem ter implementa√ß√µes; interfaces n√£o (antes do Java 8).", "D) Interfaces s√≥ existem em bibliotecas externas."},
                'C',
                "Cap√≠tulo 7 - Interfaces e Classes Abstratas"
        ));

        perguntas.add(new Pergunta(
                "Qual √© a principal vantagem do polimorfismo?",
                new String[]{"A) Executar m√©todos mais rapidamente.", "B) Permitir que um objeto se comporte como v√°rios tipos.", "C) Criar classes mais curtas.", "D) Eliminar a necessidade de interfaces."},
                'B',
                "Cap√≠tulo 8 - Polimorfismo"
        ));

        perguntas.add(new Pergunta(
                "Qual afirma√ß√£o sobre Threads em Java est√° correta?",
                new String[]{"A) Uma thread sempre bloqueia o programa principal.", "B) Threads s√≥ funcionam com m√©todos est√°ticos.", "C) Threads permitem execu√ß√£o concorrente de tarefas.", "D) Threads precisam de um construtor p√∫blico."},
                'C',
                "Cap√≠tulo 11 - Concorr√™ncia e Threads"
        ));

        perguntas.add(new Pergunta(
                "O que √© o Garbage Collector em Java?",
                new String[]{"A) Um coletor de arquivos tempor√°rios.", "B) Um algoritmo de ordena√ß√£o.", "C) Um processo que remove objetos n√£o utilizados da mem√≥ria.", "D) Uma fun√ß√£o para limpar vari√°veis locais."},
                'C',
                "Cap√≠tulo 9 - Gerenciamento de Mem√≥ria"
        ));

        perguntas.add(new Pergunta(
                "Qual a fun√ß√£o do m√©todo main em Java?",
                new String[]{"A) Inicializar vari√°veis globais.", "B) Criar a interface do usu√°rio.", "C) Ser o ponto de entrada do programa.", "D) Compilar o c√≥digo."},
                'C',
                "Cap√≠tulo 1 - Introdu√ß√£o ao Java"
        ));

        perguntas.add(new Pergunta(
                "Qual √© a fun√ß√£o da palavra-chave new em Java?",
                new String[]{"A) Declarar um novo m√©todo.", "B) Criar uma nova vari√°vel primitiva.", "C) Instanciar um novo objeto.", "D) Iniciar um loop."},
                'C',
                "Cap√≠tulo 2 - Classes e Objetos"
        ));
    }
}
